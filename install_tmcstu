#!/usr/bin/env bash
source _common.sh
source custom.sh

function help() {
  echo "$1: scripts to install a new TMC student PC workstation for research"
  echo ""
  echo "Subcommands:"
  echo "  help   : this help info"
  echo "  init   : minimal install from Fedora repository"
  echo "  cuda   : install necessary components to enable CUDA programming"
  echo "  vc     : verify cuda installation"
  echo "  docker : install Docker engine"
  echo "  vscode : install Visual Studio Code"
  echo "  fulltl : install the full set of packages of TeXLive distribution (~2G)"
  echo ""
  echo "Notes: "
  echo "  1. installation here mostly uses \`dnf\`"
  echo "  2. it may require sudo to replace repo source or install by \`dnf\`"
  echo ""
  echo "TODOs:"
  echo "  1. obtain newest workable hosts and setup for Google and GitHub, etc"
  echo "  2. config scripts, patches, makefile, modulefiles, etc"
  echo ""
  echo "Update: 2021-07-19"
  echo ""
  echo "Contributors: MY Zhang"
  echo ""
}
#  echo "  [ conda  ] : install miniconda"

FEDORA_VERSION=$(get_fedora_ver)
FEDORA_VERSION_MIN=29

function install_pyenv() {
  sudo dnf -y install xz xz-devel make gcc zlib-devel bzip2 bzip2-devel \
    readline-devel sqlite sqlite-devel tk-devel libffi-devel openssl-devel
  #curl https://pyenv.run | bash
}

function install_config_tools() {
  # since CUDA incompatiblity may happen for GCC
  # use the stable version from fedora repo instead of update
  sudo dnf --disablerepo="*" --enablerepo=fedora -y install gcc gfortran gcc-c++
  sudo dnf -y install \
    make cmake autoconf automake git binutils binutils-devel tcsh \
    bzip2 gzip p7zip zstd \
    environment-modules \
    vim-enhanced neovim \
    jq \
    ripgrep fd-find \
    lshw htop
}

function install_network_tools() {
  sudo dnf -y install openssl-devel curl libcurl-devel wget
}

function install_sci_tools () {
  # units for unit conversion
  # (xm)grace, gnuplot, imagemagick, ghostscript, povray for visualization
  # texstudio and texlive for writing tex, texdoc for documentation
  # extra useful packages
  sudo dnf -y install units \
    grace gnuplot ImageMagick ghostscript povray
  sudo dnf -y install texstudio texlive texlive-scheme-medium texlive-{texlive-en-doc,texlive-zh-cn-doc}
  sudo dnf -y install texlive-{ctex,xcjk2uni} \
    texlive-{physics,abstract,wordcount,xargs,worksheet,wordlike,zhnumber} \
    texlive-{cleveref,overpic,SIunits,a0poster,algorithmicx,algorithms,answers,annotate} \
    texlive-{tabulary,appendix,augie,autonum,autopdf,babel,babelbib} \
    texlive-{tikz-dependency,tikz-3dplot} \
    texlive-epstopdf{,-bin,-doc}
  sudo dnf -y install texlive-beamer{,audience}
  sudo dnf -y install texlive-{vancouver,revtex,revtex-doc,revtex4,revtex4-doc,achemso,tocbibind,pkuthss,pkuthss-doc} \
    texlive-biblatex-{chem,chicago,phys,publist}

  return
}

function install_texlive_full () {
  # the full texlive packages, in Fedora it is texlive-scheme-full
  sudo dnf -y install texlive-scheme-full
  return
}

function install_docker() {
  # Docker engine
  sudo dnf -y install dnf-plugins-core
  # add the lateset repo
  sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  sudo dnf remove -y docker docker-client{,-latest} \
                  docker-{common,latest,logrotate,latest-logrotate} \
                  docker-{selinux,engine,engine-selinux}
  sudo dnf -y install docker-ce docker-ce-cli containerd.io
}

function init_fedora() {

  if (( FEDORA_VERSION < FEDORA_VERSION_MIN )); then
    echo "Error! Too low Fedora release version"
    echo "($FEDORA_VERSION < minimal version $FEDORA_VERSION_MIN)"
    exit 1
  fi

  sudo bash _renew_repo_sources.sh fedora
  sudo dnf -y update
  sudo dnf -y upgrade

  install_tools

  mkdir -p "$PREFIX"
  if [[ ! -d "$(dirname "$PREFIX")/modulefiles" ]]; then
    cp -ur modulefiles "$(dirname "$PREFIX")"
  else
    echo "Found modulefiles under $(dirname "$PREFIX"), skip"
  fi
}

function install_tools() {
  install_network_tools
  install_config_tools
  install_sci_tools
}

function install_cuda() {
  ## Download and install necessary components to enable CUDA programming

  # install kernel headers
  sudo dnf install "kernel-devel-$(uname -r)" "kernel-headers-$(uname -r)"
  # add official repo
  sudo dnf config-manager --add-repo \
    "https://developer.download.nvidia.com/compute/cuda/repos/fedora$FEDORA_VERSION/x86_64/cuda-fedora$FEDORA_VERSION.repo"
  # disable the nvidia-driver if existing, according to
  # https://ask.fedoraproject.org/t/dnf-update-nvidia-error/8864/5
  # https://rpmfusion.org/Howto/CUDA#Which_driver_Package
  sudo dnf clean expire-cache
  sudo dnf -y module disable nvidia-driver
  sudo dnf -y install cuda
  # post-installation
  # install samples-dependent libraries
  sudo dnf -y install freeglut-devel libX11-devel libXi-devel libXmu-devel \
    make mesa-libGLU-devel
}

function verify_cuda() {
  # verify the dnf CUDA
  CUDA_PREFIX="/usr/local/cuda"
  CUDA_VERSION="$(awk '/Release Notes/ {print $3}' "$CUDA_PREFIX"/CUDA_Toolkit_Release_Notes.txt | tail -1)"
  # verify installation
  PATH="$CUDA_PREFIX"/bin${PATH:+:${PATH}}
  LD_LIBRARY_PATH="$CUDA_PREFIX"/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
  if [[ ! -d NVIDIA_CUDA-"$CUDA_VERSION"_Samples ]]; then
    cuda-install-samples-"$CUDA_VERSION".sh .
  fi
  cwd="$(pwd)"
  cd NVIDIA_CUDA-"$CUDA_VERSION"_Samples || exit 0
  make || \
    echo "If c++:chrono error happens in make, try downgrade gcc by: dnf downgrade gcc. 10.0.1 and 10.2.1 shall work." \
    && exit 1
  cd bin/x86_64/linux/release || exit 0
  ./deviceQuery
  # this binary detects workable CUDA-GPU
  # If failed, the CUDA-GPU is not properly set up
  # see the following link and TMCSTU note for configuration.
  # https://forums.developer.nvidia.com/t/solved-run-cuda-on-dedicated-nvidia-gpu-while-connecting-monitors-to-intel-hd-graphics-is-this-possible/47690
  cd "$cwd" || exit 0
}

function install_vscode() {
  # install code (VS code) as a popular IDE by dnf
  sudo bash _renew_repo_sources.sh vscode
  sudo dnf install -y code
}

function main() {
  opts=("$@")
  if (( $# == 0 )); then
    help "$0"
  else
    case ${opts[0]} in
      "help" | "h" | "-h" | "--help" ) help "$0" ;;
      "init"   ) init_fedora ;;
      # tools is a hidden command, it is called in init
      # Put it here for test use without changing the repo or updating
      "tools"  ) install_tools ;;
      "cuda"   ) install_cuda;;
      "vc"     ) verify_cuda;;
      "docker" ) install_docker ;;
      "vscode" ) install_vscode ;;
      "fulltl" ) install_texlive_full ;;
#      "-p" ) install_pyenv ;;
#      "conda" ) install_conda ;;
      * ) echo "Error: unknown command/option " "${opts[0]}"; \
        help "$0"; exit 1 ;;
    esac
  fi
}

main "$@"

