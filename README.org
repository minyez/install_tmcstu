#+TITLE: TMC 组学生 PC 的基本使用指南
#+EMAIL: stevezhang@pku.edu.cn
#+AUTHOR: Min-Ye Zhang
#+STARTUP: content
#+ROAM_TAGS: Tips
#+CREATED: [2021-04-12 Mon 17:02]
#+LATEX_CLASS: article
#+LATEX_COMPILER: xelatex
#+OPTIONS: email:t f:t

#+LATEX: \clearpage

* 系统与硬件
#+NAME: TMCSTU 主机系统与主要硬件规格
#+ATTR_LATEX: :booktabs t
| 项目 | 值                                                                                        |
|------+-------------------------------------------------------------------------------------------|
| OS   | Fedora 32 (2021-04-12)                                                                    |
| CPU  | Intel Core i7-10700 @2.90GHz, 2 threads/core \times 8 cores, 指令集 SSE4.1, SSE4.2, AVX2  |
| 内存 | Samsung 8GB DDR4-3200MT +  Hynix/Hyundai 8GB DDR4-3200MT                                  |
| 硬盘 | 256G SSD (SK Hynix BC511) + 2T HDD (ST20000DM008)                                         |
| GPU  | NVIDIA Quadro P620 (128 \times 4 CUDA cores, 2GB Mem)                                     |

* 软件
** 前排提醒
在使用前, 确认电脑已经联入公网, 例如通过浏览器访问 www.baidu.com 来测试.
如果未联入公网, 需要登录 [[https://its.pku.edu.cn][ITS]] 连入北大网关.

对于新入门 Linux 系统的同学来说, 在输入相关命令时, 最好试着去了解命令所涉及的 Linux 程序和相关的基础语法.
如有可能, 可以读一下 =install_tmcstu= 的源码, 了解一下 bash 脚本的编写, 对以后的工作会有帮助.

** 快速上手

#+begin_quote
注意: 如果你手上的是旧版本的 =install_tmcstu=, 其中可执行脚本均带有 sh 后缀,
那么这一版本的说明对你是不适用的. 请使用旧版 (changelog 截止至 2021-04-29), 或阅读
文件夹下的 =README= (org 或 md 文件)
#+end_quote

在 =tmcstu= 家目录下查看是否有 =install_tmcstu= 这一文件夹.
如果没有, 那你就很可能是第一个使用这台机器的人, 请在[[前排提醒][联网]]后输入以下命令:

#+begin_src shell
rsync --exclude="repos" --exclude="pkgs" -ar yourusername@222.29.156.110:/home/zhangmy/install_tmcstu ~/
cd ~/install_tmcstu
chmod +x install_tmcstu && ./install_tmcstu init
chmod +x install_repos_pkgs && ./install_repos_pkgs min
#+end_src

时间约为 10 到 20 分钟. 这会为你安装

- ViM, XmGrace, TeXLive
- GCC (包括 gfortran), make, cmake, autoconfig, ...
- XCrySDen, VESTA, JabRef, Zotero

That's all :) 下面几节是对上面命令的具体解释和一些扩展功能, 感兴趣的话可以阅读.

** 环境初始化
新 PC 的初始用户名为 =tmcstu=. 建议保持用户名不变, 通过 =passwd= 修改密码.

Fedora 环境初始化和基础软件安装通过 =install_tmcstu= 脚本完成,
该脚本可从工作站获取
#+begin_src shell
rsync --exclude="repos" --exclude="pkgs" -ar yourusername@222.29.156.110:/home/zhangmy/install_tmcstu .
#+end_src
也可以从 GitHub 上 clone
#+begin_src shell
git clone https://github.com/minyez/install_tmcstu.git
#+end_src
GitHub 上的版本通常比工作站上的更新.
随后在终端依次输入
#+begin_src shell
cd install_tmcstu
chmod +x install_tmcstu
./install_tmcstu init
#+end_src
以完成基础软件的安装.
包括 Environment Module, Vim, GCC, cmake, TeX, XmGrace 等等.
具体内容可以阅读该脚本的帮助说明
#+begin_src shell
./install_tmcstu help
#+end_src

** 安装 VirtualBox 和 Windows 虚拟机
在 Fedora 32 上, 有两种方式可以安装 VirtualBox.
1. 从源安装: =sudo dnf install VirtualBox=. 安装完成后可以在终端输入 =virtualbox= 打开.
2. 从官方网站下载镜像 ([[https://download.virtualbox.org/virtualbox/6.1.22/VirtualBox-6.1-6.1.22_144080_fedora32-1.x86_64.rpm][蒋老师提供的链接]]). 下载完成后双击打开 rpm 文件, 或运行
   #+begin_src shell
   sudo rpm -i Virtualbox.rpm
   #+end_src

Windows 虚拟机可以使用蒋老师提供的 Win7 系统文件, 工作站位置为 =/home/data_papers/vbox/win7.vdi=

** 常用科研工具
脚本 =install_repos_pkgs= 实现了部分与课题组有关的科研工具 (例如可视化工具, 编译器, 第一性原理计算软件)
的安装.


这些工具主要以两种方式获得

- 可公开获取的开源免费程序: 用 =wget= 从网络上直接抓取.
  这些程序记录在了 =extern_repos.sh= 的 =repos_names= 数组中.
- 商业程序等较难获取的程序: 已在工作站上存档, 用 SSH 从工作站上获取.
  这些程序记录在 =remote_pkgs.sh= 的 =pkgs_names= 数组中.

在使用 =install_repos_pkgs= 安装时, 脚本会自动检测是否需要下载或者提取安装包.
另外, 也可以通过
#+begin_src shell
./install_repos_pkgs dl list  # 仅显示全部可下载内容
./install_repos_pkgs dl repos # 仅网络源码
./install_repos_pkgs dl pkgs  # 仅工作站源码
./install_repos_pkgs dl all   # 网络和工作站源码
#+end_src
可完成所有程序下载和存档抓取. 抓取后的程序在 =repos= 和 =pkgs= 文件夹下.
注意, 在使用 =pkgs= 或者 =all= 前, 请先修改 =remote_pkgs.sh= 中的 =SSH_CONNECTION= 变量, 并确保该 SSH 可通过证书验证, 无需输入密码.
相关设置可以参考这一链接: [[https://blog.csdn.net/m0_37822234/article/details/82494556][SSH 远程登录和 SSH 免密码登录]]

目前, 大部分抓取后的程序需要自己安装. 有部分软件已经写好了安装器, 输入
#+begin_src shell
./install_repos_pkgs list
#+end_src
可查看已有的安装器实现. 部分安装器会修改用户的 bashrc.
另有一部分安装器, 尽管没有实现完全的脚本化安装, 但给出了完整的安装提示, 同学们可根据提示来手动安装.
目前已经完成的安装器包括

- =Chrome=
- =VESTA=: 晶体可视化软件
- =XCrySDen=: 另一款晶体可视化软件
- =JabRef=: 开源 Bibtex 文件管理软件
- =Zotero=: 开源文献管理软件
- =intel_xe_2020_update4=: Intel 编译套组, 版本 2020 update 4
- =intel_licenses=: Intel 编译套组许可证
- =g09e1=: Gaussian 09, 版本 e1
- =vasp-5.4.4=: VASP 5.4.4 版 (Intel 编译), 补丁 16052018.
- =cp2k-7.1-intel=: 用 Intel 编译器编译安装 CP2k 7.1 及其依赖
  - =libint-v2.6.0-cp2k-lmax-6-intel=
  - =libxc-4.3.4-intel=
  - =elpa-2019.11.001-intel=
  - =libxsmm-1.15-intel=
- =qe-6.6-intel=: 用 Intel 编译器编译安装 Quantum Espresso 6.6 及其依赖
  - =libxc-4.3.4-intel=
  - =hdf5-1.12.0-intel=
- =BerkeleyGW-3.0.1-intel=: 用 Intel 编译器编译安装 BerkeleyGW 3.0.1 及其依赖
  - =hdf5-1.8.21-intel=

为方便使用, 输入
#+begin_src shell
./install_repos_pkgs min
#+end_src
即可安装最基本的几个程序.

目前, 自动安装的程序都会置于 =~/local/programs= 下, 或通过 rpm 安装到根目录中.
建议在手动安装的程序时也遵循这一设置.

** 安装 Intel 2020 Update 4 编译套件
由于 Intel 编译套件有自己的交互式安装脚本, 不适用于安装器自动安装的方式, 需要手动安装.
又由于大部分计算程序的编译都依赖 Intel 编译套件, 因此为帮助大家更好地使用这些脚本的功能, 有必要的在这里详细说明一下 Intel 编译套件的安装过程.
这里呈现的是较新的 2020 update 4 版本的安装过程, 更早版本的安装是类似的.

安装所需要的文件 (包括源文件和许可证) 可以从工作站上获取
#+begin_src shell
./install_repos_pkgs intel_licenses        # 许可证
./install_repos_pkgs intel_xe_2020_update4 # 源文件
#+end_src
其中第二步在下载源文件的同时, 会给出详细的手动安装提示.
这一小节往后的文字就是对该提示的一个样例.
以用户 tmcstu, 安装路径为 =~/local/programs= 为例, 获取源文件后输入
#+begin_src shell
cd ~/install_tmcstu/pkgs/intel_xe_2020_update4
chmod +x install.sh && ./install.sh
#+end_src
开始交互式安装, 根据安装提示前进即可. 只需要注意两点

1. 在选择安装路径时, 输入绝对路径 =/home/tmcstu/local/programs/intel_xe_2020_update4=.

   这样做的目的主要是为了保持程序安装目录的一致性.
2. 在激活时, 采用 offline 方式激活, 选择 license file 许可文件.

   随后输入 =~/local/programs/intel_licenses= 文件夹下最新的许可文件 (截止 2021-07-09 为尾号 =FMTG= 的文件) 的绝对路径.

安装完成后需要正确设置环境变量才可以使用编译器和 MKL 数学库.
有两种设置相关环境变量的方式.
第一种是载入 Intel 自带的设置脚本,
#+begin_src shell
source ~/local/programs/intel_xe_2020_update4/compilers_and_libraries/linux/bin/compilervars.sh intel64
#+end_src
可将该命令放入 =.bashrc= 以备之后使用.
第二种是配置 Environment module, 模块文件为 =modulefiles/compilers/intel/2020.4=. 输入如下命令
#+begin_src shell
mkdir -p ~/local/modulefiles/compilers/intel
cd ~/local/modulefiles/compilers/intel
cp -a ~/install_tmcstu/modulefiles/compilers/intel/2020.4 .
sed -i 's#/opt/compiler/intel/2020.4/#~/local/programs/intel_xe_2020_update4#g' 2020.4
module use ~/local/modulefiles/compilers # 可放入 bashrc 中
module load intel/2020.4 # 可放入 bashrc 中
#+end_src
以启用.

无论使用何种方式, 在设置好后尝试 =echo $MKLROOT= 或 =which mpiifort=, 若打印出非空字符串, 则说明环境变量配置正确, 安装完成, 编译器和 MKL 等应该可以使用了 :)

** 安装其他工具
*** CUDA toolkit
如需安装 CUDA toolkit, 输入
#+begin_src shell
./install_tmcstu cuda
#+end_src
安装完成后, 在确认 CUDA GPU 可用的情况下 (见 Q&A "启用 CUDA 独显"一节) 输入
#+begin_src shell
./install_tmcstuh vc
#+end_src
对 CUDA toolkit 安装进行验证.

*** Docker 引擎
同样可以通过 =install_tmcstu= 安装, 只需运行
#+begin_src shell
./install_tmcstu docker
#+end_src

*** VS Code
只需运行
#+begin_src shell
./install_tmcstu vscode
#+end_src

* Q&A
** 启用 CUDA 独显
对于需要使用 NVIDIA GPU 进行 CUDA 计算的同学, 首先在终端下输入 =nvidia-setting=.
如果弹出窗口的左侧边栏中有 "GPU 0" 标签, 那就不需要做额外操作, GPU 已经可以使用.

如果没有 "GPU 0" 标签, 那么表明 GPU 没有被检测到 (尽管在 Fedora 系统 "setting-details" 中可以看到显卡型号 P620).
一种简单的办法是用 Mini DP 线或转接口连接 NVIDIA GPU 卡槽和显示器, 而非用 VGA 或 DP 连接主机背板.
这时 GPU 也能向显示器输出高画质视频.

如果你没有 Mini DP 线, 也没有观看高画质视频的需求, 只需要用 NVIDIA GPU 作 CUDA 计算,
那么可以选择同时启用双显卡而只用集成显卡输出视频. 这涉及以下几步操作.

1. 关机, 用组里的 VGA-MiniDP 转接口, 接入 NVIDIA GPU (有四个 MiniDP 孔槽).
2. 重启电脑, 在按下开机键的同时连续敲击 F10, 直到进入 BIOS.
3. 进入 Adnvaced - Bulit-in Device Options, 找到 VGA Boot Options 选项, 将 NVIDIA VGA Controller 改为 Intel VGA controller.
4. 按 F10, YES 确认保存设置, 此时机器自动重启, 进入 Fedora GUI 后会有些卡顿, 但不用惊慌.
5. 关机. 拔出 MiniDP 转接口, 直接接入 VGA 或 DP, 重启.

在安装完 CUDA-kit 后, 进入 NVIDIA CUDA 样例, 设置好环境变量后运行 =deviceQuery=
#+begin_src shell
./deviceQuery
#+end_src
或用上面脚本的 =vc= 子命令来验证. 如检测到 Quadro P620 则表明设置成功.
** 编译 CUDA toolkit 出现 chrono segmentation fault
可能与 GCC 版本有关. 目前已知 10.3.1 版本会在编译 =dmmcoretensorgmm= 时报该错误.
将 GCC 版本降级到 10.2.1 或者 10.0.1 可以解决, 具体命令
#+begin_src bash
sudo dnf downgrade gcc
#+end_src

** nvidia-setting 显示有 GPU0, 但是 deviceQuery 返回错误代码 999
重启电脑后再次尝试.
** 开机后按 F10 无法进入 BIOS
这与 BIOS 设置有关. 按 F10 后若听到 "嘟" 的一声, 那么实际上已经进入 BIOS 了, 只是显示器没有能够显示 BIOS 界面.
为此需要保证 VGA Boot Options 的值与所接显卡一致. 在 BIOS 中修改该选项值的办法可参考 "启用 CUDA 独显"一节.
** 安装后无法 which 到可执行程序
一般来说, 你需要刷新 shell, 例如打开一个新的终端, 或者在原来终端下 =source ~/.bashrc=.

若在刷新 shell 后仍无法 which 到, 那么很有可能是安装器作者没有编写对应的 bashrc 修改.
此时需要你对照 =~/local/programs= 下的程序手动添加, 或者通知安装器作者修改.
** 为什么不使用 modulefile 来管理安装程序的环境变量
作者精力有限, 暂时没有实现的动力 :( 读者可根据对应 bashrc 代码块, 参考[[https://modules.readthedocs.io/en/latest/modulefile.html][这一链接]]编写自己的 modulefile.
** 无法从工作站提取程序存档
首先确认你有可用的工作站账号.
然后打开 =remote_pkgs.sh=, 修改 =SSH_CONNECTION= 为你连接工作站时所用的名称. 例如

#+begin_src shell
SSH_CONNECTION="zhangmy@222.29.156.110"
#+end_src

** 无法用 SSH 连接到 TMCSTU
首先确认 TMCSTU 的 IP 是否正确, 如果 TMCSTU 在路由器内网中 (一般来说 IP 以 =192.168= 开头), 还需确认路由器端口转发正常工作 (咨询管理员).
然后确认 TMCSTU 的 22 端口是否打开. 确认方法: 输入
#+begin_src shell
sudo vim /etc/ssh/sshd_config
#+end_src
确保有 =Port 22= 一行并且没有被注释掉 (=#=). 确认后, 输入
#+begin_src shell
sudo service sshd restart
#+end_src
重启 SSH 服务. 应该可以正常 SSH 连接到 TMCSTU.

在内网环境下, 公网 IP 端口转发和内网 IP 直连通常都是可以的.
一种比较特殊的情况是, 若 TMCSTU 用的是无线网卡, 那么你在内网下是无法通过端口转发连入的.
这一问题可能和网卡以及路由的端口转发逻辑有关, 但具体原因不清楚.
此时只能使用内网 IP 直连.
这一情况在 CCMETMC3 这个路由环境下验证过.

* Changelog
- 2021-07-19 Intel 编译器安装
- 2021-07-13 增加有关联网的说明和 VASP 安装的说明
- 2021-06-17 增加 QE 和 BerkeleyGW 以及对应的 HDF5 安装器
- 2021-06-10 补充使用无线网卡的 TMCSTU 在内网 SSH 连接时的问题.
- 2021-05-26 补充 CUDA toolkit 安装和 SSH 连接的 QA.
- 2021-05-06 =dl= 子命令增加 list 选项以打印所有可下载的内容.
- 2021-05-05 移除可执行脚本名字中的 sh 后缀.
  - 将 =install_repos_pkgs= 中的 =PREFIX= 变量移入 =custom.sh=.
  - =init= 子命令不再引入 VS Code repo. Visual Studio code 的安装通过 =install_tmcstu= 子命令 =vscode= 完成.
- 2021-05-04 将 =install_tmcstu.sh= 中源码下载功能移入 =install_repos_pkgs.sh=.
- 2021-04-29 实现更多的安装器, 包括 Intel, CP2k 及其依赖.
- 2021-04-26 实现部分安装器
- 2021-04-12 草稿
